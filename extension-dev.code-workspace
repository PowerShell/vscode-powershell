{
  "folders": [
    {
      "name": "Client",
      "path": "."
    },
    {
      "name": "Server",
      "path": "../PowerShellEditorServices"
    }
  ],
  "extensions": {
    "recommendations": [
      "davidanson.vscode-markdownlint",
      "dbaeumer.vscode-eslint",
      "editorconfig.editorconfig",
      "josefpihrt-vscode.roslynator",
      "ms-azure-devops.azure-pipelines",
      "ms-dotnettools.csharp",
      "ms-vscode.powershell"
    ]
  },
  "settings": {
    "window.title": "PowerShell VS Code Extension Development",
    "debug.onTaskErrors": "prompt",
    "editor.tabSize": 4,
    "editor.insertSpaces": true,
    "files.trimTrailingWhitespace": true,
    "files.insertFinalNewline": true,
    "files.associations": {
      // Use JSONC instead of JSON because (1) that's how VS Code interprets
      // snippet files, and (2) it enables better source documentation.
      "**/snippets/*.json": "jsonc",
      "**/.vsts-ci/**/*.yml": "azure-pipelines",
    },
    // Ignore the Markdown rule:
    "markdownlint.config": {
      "MD024": false // no-duplicate-header
    },
    "powershell.codeFormatting.autoCorrectAliases": true,
    "powershell.codeFormatting.avoidSemicolonsAsLineTerminators": true,
    "powershell.codeFormatting.newLineAfterCloseBrace": false,
    "powershell.codeFormatting.trimWhitespaceAroundPipe": true,
    "powershell.codeFormatting.useCorrectCasing": true,
    "powershell.codeFormatting.whitespaceBeforeOpenBrace": false,
    "powershell.codeFormatting.whitespaceBetweenParameters": true,
    "powershell.codeFormatting.pipelineIndentationStyle": "IncreaseIndentationForFirstPipeline",
    // Lock the TypeScript SDK path to the version we use
    "typescript.tsdk": "Client/node_modules/typescript/lib",
    // Code actions like "organize imports" ignore ESLint, so we need this here
    "typescript.format.semicolons": "insert",
    // Enable ESLint as defaut formatter so quick fixes can be applied directly
    "eslint.format.enable": true,
    "[typescript]": {
      "editor.defaultFormatter": "dbaeumer.vscode-eslint",
      "editor.formatOnPaste": true,
      "editor.formatOnSave": true,
      "editor.formatOnSaveMode": "modificationsIfAvailable"
    }
  },
  "tasks": {
    "version": "2.0.0",
    "windows": {
      "options": {
        "shell": {
          "executable": "pwsh.exe",
          "args": [
            "-NoProfile",
            "-ExecutionPolicy",
            "Bypass",
            "-Command"
          ]
        }
      }
    },
    "linux": {
      "options": {
        "shell": {
          "executable": "pwsh",
          "args": [
            "-NoProfile",
            "-Command"
          ]
        }
      }
    },
    "osx": {
      "options": {
        "shell": {
          "executable": "/usr/local/bin/pwsh",
          "args": [
            "-NoProfile",
            "-Command"
          ]
        }
      }
    },
    "tasks": [
      {
        "label": "Build",
        "type": "shell",
        "options": {
          "cwd": "${workspaceFolder:Client}"
        },
        "command": "./build.ps1",
        "problemMatcher": [
          "$msCompile",
          "$tsc"
        ],
        "group": {
          "kind": "build",
          "isDefault": true
        }
      },
      {
        "label": "Test Client",
        "type": "shell",
        "options": {
          "cwd": "${workspaceFolder:Client}"
        },
        "command": "./build.ps1 -Test",
        "problemMatcher": [
          "$msCompile",
          "$tsc"
        ],
        "group": {
          "kind": "test",
          "isDefault": true
        }
      },
      {
        "label": "Test Server",
        "type": "shell",
        "options": {
          "cwd": "${workspaceFolder:Server}"
        },
        "problemMatcher": [
          "$msCompile"
        ],
        "command": "Invoke-Build TestServerPS72",
        "group": {
          "kind": "test",
          "isDefault": true
        }
      },
      {
        "label": "Invoke-Build Client",
        "type": "shell",
        "options": {
          "cwd": "${workspaceFolder:Client}"
        },
        "command": "Invoke-Build ${input:clientBuildCommand}",
        "group": "build"
      },
      {
        "label": "Invoke-Build Server",
        "type": "shell",
        "options": {
          "cwd": "${workspaceFolder:Server}"
        },
        "command": "Invoke-Build ${input:serverBuildCommand}",
        "group": "build"
      },
      // HACK: Can't use task type npm in workspace config: https://github.com/microsoft/vscode/issues/96086
      {
        "label": "test-watch",
        "icon": {
          "color": "terminal.ansiCyan",
          "id": "sync"
        },
        "type": "shell",
        "options": {
          "cwd": "${workspaceFolder:Client}"
        },
        "command": "npm run-script build-test-watch",
        "group": "test",
        "problemMatcher": "$tsc-watch",
        "isBackground": true,
        "dependsOn": "build-watch" // We need to also build main.js extension for testing or it leads to sourcemap errors
      },
      {
        "label": "build-watch",
        "icon": {
          "color": "terminal.ansiCyan",
          "id": "sync"
        },
        "type": "shell",
        "options": {
          "cwd": "${workspaceFolder:Client}"
        },
        "command": "npm run-script build-watch",
        "group": "build",
        "problemMatcher": "$esbuild-watch",
        "isBackground": true,
      },
    ],
    "inputs": [
      {
        "type": "pickString",
        "id": "clientBuildCommand",
        "description": "Which Invoke-Build Client Task?",
        "options": [
          "Restore",
          "Clean",
          "Build",
          "Test",
          "Package"
        ],
        "default": "Clean"
      },
      {
        "type": "pickString",
        "id": "serverBuildCommand",
        "description": "Which Invoke-Build Server Task?",
        "options": [
          "SetupDotNet",
          "BinClean",
          "Clean",
          "Build",
          "Test",
          "TestServer",
          "TestServerPS72",
          "TestE2E",
        ],
        "default": "Clean"
      }
    ]
  },
  "launch": {
    "version": "0.2.0",
    "compounds": [
      {
        "name": "Test Extension",
        "configurations": [
          "ExtensionTests",
          "ExtensionTestRunner",
        ],
        "stopAll": true,
        "presentation": {
          "group": "test",
          "order": 1
        },
        // This is here so instead of under TestRunner so that the attach doesn't start until the compile is complete
        "preLaunchTask": "test-watch"
      }
    ],
    "configurations": [
      {
        "name": "Launch Extension",
        "type": "extensionHost",
        "request": "launch",
        "runtimeExecutable": "${execPath}",
        "args": [
          "--extensionDevelopmentPath=${workspaceFolder:Client}"
        ],
        "env": {
          "__TEST_WORKSPACE_PATH": "${workspaceFolder:Client}/examples",
        },
        "sourceMaps": true,
        // This speeds up source map detection and makes smartStep work correctly
        "outFiles": [
          "${workspaceFolder:Client}/out/**/*.js",
          "!**/node_modules/**",
          "!**/.vscode-test/**"
        ],
        "skipFiles": [
          "<node_internals>/**",
          "**/node_modules/**",
          "**/.vscode-test/**"
        ],
        "presentation": {
          "hidden": false,
          "group": "test",
          "order": 2
        }
      },
      {
        // https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger-launchjson.md
        "name": "Attach to Editor Services",
        "type": "coreclr",
        "request": "attach",
        "processId": "${command:pickProcess}",
        "justMyCode": false,
        "suppressJITOptimizations": true,
        "symbolOptions": {
          "searchPaths": [],
          "searchMicrosoftSymbolServer": true,
          "searchNuGetOrgSymbolServer": true
        },
        "presentation": {
          "hidden": false,
          "group": "test",
          "order": 3
        }
      },
      {
        // Runs the extension in an empty temp profile that is automatically cleaned up after use
        // Undocumented: https://github.com/microsoft/vscode-docs/issues/6220
        "name": "Launch Extension - Temp Profile",
        "type": "extensionHost",
        "request": "launch",
        "runtimeExecutable": "${execPath}",
        "args": [
          "--profile-temp",
          "--extensionDevelopmentPath=${workspaceFolder:Client}",
          "${workspaceFolder:Client}/examples"
        ],
        "sourceMaps": true,
        // This speeds up source map detection and makes smartStep work correctly
        "outFiles": [
          "${workspaceFolder:Client}/out/**/*.js",
          "!**/node_modules/**",
          "!**/.vscode-test/**"
        ],
        "skipFiles": [
          "<node_internals>/**",
          "**/node_modules/**",
          "**/.vscode-test/**"
        ],
        "presentation": {
          "hidden": false,
          "group": "test",
          "order": 2
        }
      },
      {
        // Runs the extension in an isolated but persistent profile separate from the user settings
        // Undocumented: https://github.com/microsoft/vscode-docs/issues/6220
        "name": "Launch Extension - Isolated Profile",
        "type": "extensionHost",
        "request": "launch",
        "runtimeExecutable": "${execPath}",
        "args": [
          "--profile=debug",
          "--extensionDevelopmentPath=${workspaceFolder:Client}",
          "${workspaceFolder:Client}/examples"
        ],
        "sourceMaps": true,
        // This speeds up source map detection and makes smartStep work correctly
        "outFiles": [
          "${workspaceFolder:Client}/out/**/*.js",
          "!**/node_modules/**",
          "!**/.vscode-test/**"
        ],
        "skipFiles": [
          "<node_internals>/**",
          "**/node_modules/**",
          "**/.vscode-test/**"
        ],
        "presentation": {
          "hidden": false,
          "group": "test",
          "order": 2
        }
      },
      {
        "name": "ExtensionTestRunner",
        "type": "node",
        "request": "launch",
        "program": "${workspaceFolder:Client}/out/test/runTests.js",
        "cascadeTerminateToConfigurations": [
          "ExtensionTests",
        ],
        // This speeds up source map detection and makes smartStep work correctly
        "outFiles": [
          "${workspaceFolder:Client}/out/**/*.js",
          "!**/node_modules/**",
          "!**/.vscode-test/**"
        ],
        "skipFiles": [
          "<node_internals>/**",
          "**/node_modules/**",
          "**/.vscode-test/**"
        ],
        "args": [
          "59229" // Wait on this port for the separate debugger task to attach
        ],
        "presentation": {
          "hidden": true,
        },
        "internalConsoleOptions": "neverOpen",
        "console": "integratedTerminal",
        "autoAttachChildProcesses": false // Doesnt work with the extension host for whatever reason, hence the separate attach.
      },
      {
        "name": "ExtensionTests",
        "type": "node",
        "request": "attach",
        "port": 59229,
        "autoAttachChildProcesses": true,
        "outputCapture": "console",
        "continueOnAttach": true,
        // Sometimes we may need to install extensions or reload the window which requires reconnecting
        "restart": {
          "delay": 1000,
          "maxAttempts": 3
        },
        "presentation": {
          "hidden": true,
        },
        // This speeds up source map detection and makes smartStep work correctly
        "outFiles": [
          "${workspaceFolder:Client}/out/**/*.js",
          "!**/node_modules/**",
          "!**/.vscode-test/**"
        ],
        "skipFiles": [
          "<node_internals>/**",
          "**/node_modules/**",
          "**/.vscode-test/**"
        ],
      }
    ]
  }
}
