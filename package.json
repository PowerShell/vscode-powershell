{
  "name": "powershell",
  "displayName": "PowerShell",
  "version": "2022.8.5",
  "preview": false,
  "publisher": "ms-vscode",
  "description": "Develop PowerShell modules, commands and scripts in Visual Studio Code!",
  "engines": {
    "vscode": "^1.65.0"
  },
  "license": "SEE LICENSE IN LICENSE.txt",
  "homepage": "https://github.com/PowerShell/vscode-powershell/blob/main/README.md",
  "categories": [
    "Debuggers",
    "Programming Languages",
    "Snippets",
    "Linters"
  ],
  "icon": "media/PowerShell_Icon.png",
  "galleryBanner": {
    "color": "#ACD1EC",
    "theme": "light"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/PowerShell/vscode-powershell.git"
  },
  "activationEvents": [
    "onDebugResolve:PowerShell",
    "onLanguage:powershell",
    "onCommand:PowerShell.NewProjectFromTemplate",
    "onCommand:PowerShell.OpenExamplesFolder",
    "onCommand:PowerShell.PickPSHostProcess",
    "onCommand:PowerShell.PickRunspace",
    "onCommand:PowerShell.SpecifyScriptArgs",
    "onCommand:PowerShell.ShowSessionConsole",
    "onCommand:PowerShell.ShowSessionMenu",
    "onCommand:PowerShell.RestartSession",
    "onCommand:PowerShell.ShowLogs",
    "onCommand:PowerShell.OpenLogFolder",
    "onCommand:PowerShell.GenerateBugReport",
    "onCommand:PowerShell.OpenExamplesFolder",
    "onCommand:PowerShell.EnableISEMode",
    "onCommand:PowerShell.DisableISEMode",
    "onCommand:PowerShell.ToggleISEMode",
    "onView:PowerShellCommands",
    "onWalkthrough:PowerShell"
  ],
  "dependencies": {
    "@vscode/extension-telemetry": "^0.6.2",
    "node-fetch": "~2.6.7",
    "semver": "~7.3.7",
    "uuid": "~9.0.0",
    "vscode-languageclient": "~8.0.2",
    "vscode-languageserver-protocol": "~3.17.2"
  },
  "devDependencies": {
    "@types/glob": "~8.0.0",
    "@types/mocha": "~9.1.1",
    "@types/mock-fs": "~4.13.1",
    "@types/node": "~14.17.4",
    "@types/node-fetch": "~2.6.2",
    "@types/rewire": "~2.5.28",
    "@types/semver": "~7.3.12",
    "@types/sinon": "~10.0.13",
    "@types/uuid": "~8.3.4",
    "@types/vscode": "~1.65.0",
    "@vscode/test-electron": "~2.1.5",
    "esbuild": "^0.15.9",
    "glob": "^8.0.3",
    "mocha": "~10.0.0",
    "mocha-multi-reporters": "~1.5.1",
    "mock-fs": "~5.1.4",
    "rewire": "~6.0.0",
    "sinon": "~14.0.0",
    "tslint": "~6.1.3",
    "typescript": "~4.8.3",
    "vsce": "~2.11.0"
  },
  "extensionDependencies": [
    "vscode.powershell"
  ],
  "main": "./out/main.js",
  "scripts": {
    "lint": "tslint --project tsconfig.json",
    "build": "tsc --project tsconfig.json && esbuild ./src/main.ts --outdir=out --bundle --external:vscode --platform=node",
    "test": "node ./out/test/runTests.js",
    "package": "vsce package --no-gitHubIssueLinking",
    "publish": "vsce publish"
  },
  "contributes": {
    "breakpoints": [
      {
        "language": "powershell"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "PowerShell",
          "title": "PowerShell",
          "icon": "$(terminal-powershell)"
        }
      ]
    },
    "views": {
      "PowerShell": [
        {
          "id": "PowerShellCommands",
          "name": "Command Explorer",
          "when": "config.powershell.sideBar.CommandExplorerVisibility"
        }
      ]
    },
    "keybindings": [
      {
        "command": "PowerShell.ShowHelp",
        "key": "ctrl+f1",
        "when": "editorTextFocus && editorLangId == 'powershell'"
      },
      {
        "command": "PowerShell.ExpandAlias",
        "key": "shift+alt+e",
        "when": "editorTextFocus && editorLangId == 'powershell'"
      },
      {
        "command": "PowerShell.ShowAdditionalCommands",
        "key": "shift+alt+s",
        "when": "editorTextFocus && editorLangId == 'powershell'"
      },
      {
        "command": "PowerShell.RunSelection",
        "key": "f8",
        "when": "editorTextFocus && editorLangId == 'powershell'"
      },
      {
        "command": "editor.action.insertSnippet",
        "when": "editorTextFocus && editorLangId == 'powershell'",
        "mac": "cmd+alt+j",
        "win": "ctrl+alt+j",
        "linux": "ctrl+alt+j"
      }
    ],
    "commands": [
      {
        "command": "PowerShell.ExpandAlias",
        "title": "Expand Alias",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.EnableISEMode",
        "title": "Enable ISE Mode",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.DisableISEMode",
        "title": "Disable ISE Mode (restore to defaults)",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.ToggleISEMode",
        "title": "Toggle ISE Mode",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.RefreshCommandsExplorer",
        "title": "Refresh Command Explorer",
        "icon": "$(sync)",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.InsertCommand",
        "title": "Insert Command",
        "icon": "$(pencil)",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.OnlineHelp",
        "title": "Get Online Help for Command (Deprecated)",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.ShowHelp",
        "title": "Get Help for Command",
        "icon": "$(question)",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.Debug.Start",
        "title": "Run",
        "category": "PowerShell",
        "icon": "$(run)"
      },
      {
        "command": "PowerShell.RunSelection",
        "title": "Run Selection",
        "category": "PowerShell",
        "icon": "$(debug-line-by-line)"
      },
      {
        "command": "PowerShell.RestartSession",
        "title": "Restart Current Session",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.ShowLogs",
        "title": "Show PowerShell Extension Logs",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.OpenLogFolder",
        "title": "Open PowerShell Extension Logs Folder",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.GenerateBugReport",
        "title": "Upload Bug Report to Github",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.OpenInISE",
        "title": "Open Current File in PowerShell ISE",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.PowerShellFindModule",
        "title": "Find/Install PowerShell Modules from the Gallery",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.ShowAdditionalCommands",
        "title": "Show Additional Commands from PowerShell Modules",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.ShowSessionMenu",
        "title": "Show Session Menu",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.ShowSessionConsole",
        "title": "Show Extension Terminal",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.NewProjectFromTemplate",
        "title": "Create New Project from Plaster Template",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.RunPesterTestsFromFile",
        "title": "Run Pester tests",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.DebugPesterTestsFromFile",
        "title": "Debug Pester tests",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.OpenExamplesFolder",
        "title": "Open Examples Folder",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.InvokeRegisteredEditorCommand",
        "title": "Invoke Registered Editor Command",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.WalkthroughTelemetry",
        "title": "Walkthrough Telemetry",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.ClosePanel",
        "title": "Close panel",
        "category": "PowerShell",
        "icon": {
          "light": "media/resources/light/ClosePanel.svg",
          "dark": "media/resources/dark/ClosePanel.svg"
        }
      },
      {
        "command": "PowerShell.PositionPanelLeft",
        "title": "Move panel left",
        "category": "PowerShell",
        "icon": {
          "light": "media/resources/light/MovePanelLeft.svg",
          "dark": "media/resources/dark/MovePanelLeft.svg"
        }
      },
      {
        "command": "PowerShell.PositionPanelBottom",
        "title": "Move panel to bottom",
        "category": "PowerShell",
        "icon": {
          "light": "media/resources/light/MovePanelBottom.svg",
          "dark": "media/resources/dark/MovePanelBottom.svg"
        }
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "PowerShell.InsertCommand",
          "when": "false"
        },
        {
          "command": "PowerShell.RefreshCommandsExplorer",
          "when": "config.powershell.sideBar.CommandExplorerVisibility"
        },
        {
          "command": "PowerShell.InvokeRegisteredEditorCommand",
          "when": "false"
        }
      ],
      "explorer/context": [
        {
          "command": "PowerShell.RunPesterTestsFromFile",
          "when": "resourceFilename =~ /\\.tests\\.ps1$/i"
        },
        {
          "command": "PowerShell.DebugPesterTestsFromFile",
          "when": "resourceFilename =~ /\\.tests\\.ps1$/i"
        }
      ],
      "editor/context": [
        {
          "when": "editorLangId == powershell",
          "command": "PowerShell.RunSelection",
          "group": "2_powershell"
        },
        {
          "when": "editorLangId == powershell",
          "command": "PowerShell.ShowHelp",
          "group": "2_powershell"
        }
      ],
      "editor/title": [
        {
          "when": "editorLangId == powershell && config.powershell.buttons.showPanelMovementButtons",
          "command": "PowerShell.PositionPanelBottom",
          "group": "navigation@97"
        },
        {
          "when": "editorLangId == powershell && config.powershell.buttons.showPanelMovementButtons",
          "command": "PowerShell.PositionPanelLeft",
          "group": "navigation@98"
        },
        {
          "when": "editorLangId == powershell && config.powershell.buttons.showPanelMovementButtons",
          "command": "PowerShell.ClosePanel",
          "group": "navigation@99"
        },
        {
          "when": "editorLangId == powershell && config.powershell.buttons.showRunButtons",
          "command": "PowerShell.Debug.Start",
          "group": "navigation@100"
        },
        {
          "when": "editorLangId == powershell && config.powershell.buttons.showRunButtons",
          "command": "PowerShell.RunSelection",
          "group": "navigation@101"
        }
      ],
      "editor/title/context": [
        {
          "when": "resourceFilename =~ /\\.tests\\.ps1$/i",
          "command": "PowerShell.RunPesterTestsFromFile"
        },
        {
          "when": "resourceFilename =~ /\\.tests\\.ps1$/i",
          "command": "PowerShell.DebugPesterTestsFromFile"
        }
      ],
      "view/title": [
        {
          "command": "PowerShell.RefreshCommandsExplorer",
          "when": "view == PowerShellCommands",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "PowerShell.ShowHelp",
          "when": "view == PowerShellCommands",
          "group": "inline@1"
        },
        {
          "command": "PowerShell.InsertCommand",
          "when": "view == PowerShellCommands",
          "group": "inline@2"
        }
      ]
    },
    "problemMatchers": [
      {
        "name": "pester",
        "owner": "powershell",
        "fileLocation": [
          "absolute"
        ],
        "severity": "error",
        "pattern": [
          {
            "regexp": "^\\s*(?:\\[-\\]\\s+)(.*?)(?:\\s+\\d+\\.?\\d*\\s*m?s)(?:\\s+\\(\\d+\\.?\\d*m?s\\|\\d+\\.?\\d*m?s\\))?\\s*$",
            "message": 1
          },
          {
            "regexp": "^\\s+[Aa]t\\s+([^,]+,)?(.+?):(\\s+line\\s+)?(\\d+)(\\s+char:\\d+)?$",
            "file": 2,
            "line": 4
          }
        ]
      }
    ],
    "snippets": [
      {
        "language": "powershell",
        "path": "./snippets/PowerShell.json"
      }
    ],
    "debuggers": [
      {
        "type": "PowerShell",
        "label": "PowerShell",
        "variables": {
          "PickPSHostProcess": "PowerShell.PickPSHostProcess",
          "PickRunspace": "PowerShell.PickRunspace",
          "SpecifyScriptArgs": "PowerShell.SpecifyScriptArgs"
        },
        "languages": [
          "powershell"
        ],
        "configurationSnippets": [
          {
            "label": "PowerShell: Launch Current File",
            "description": "Launch and debug the file in the currently active editor window",
            "body": {
              "name": "PowerShell Launch Current File",
              "type": "PowerShell",
              "request": "launch",
              "script": "^\"\\${file}\"",
              "cwd": "^\"\\${file}\""
            }
          },
          {
            "label": "PowerShell: Launch Script",
            "description": "Launch and debug the specified file or command",
            "body": {
              "name": "PowerShell Launch Script",
              "type": "PowerShell",
              "request": "launch",
              "script": "^\"enter path or command to execute e.g.: \\${workspaceFolder}/src/foo.ps1 or Invoke-Pester\"",
              "cwd": "^\"\\${workspaceFolder}\""
            }
          },
          {
            "label": "PowerShell: Interactive Session",
            "description": "Debug commands executed from the Extension Terminal",
            "body": {
              "name": "PowerShell Interactive Session",
              "type": "PowerShell",
              "request": "launch",
              "cwd": ""
            }
          },
          {
            "label": "PowerShell: Attach to PowerShell Host Process",
            "description": "Attach the debugger to a running PowerShell Host Process",
            "body": {
              "name": "PowerShell Attach to Host Process",
              "type": "PowerShell",
              "request": "attach",
              "runspaceId": 1
            }
          },
          {
            "label": "PowerShell: Attach Interactive Session Runspace",
            "description": "Open runspace picker to select runspace to attach debugger to",
            "body": {
              "name": "PowerShell Attach Interactive Session Runspace",
              "type": "PowerShell",
              "request": "attach",
              "processId": "current"
            }
          }
        ],
        "configurationAttributes": {
          "launch": {
            "properties": {
              "script": {
                "type": "string",
                "description": "Optional: Absolute path to the PowerShell script to launch under the debugger."
              },
              "args": {
                "type": "array",
                "description": "Command line arguments to pass to the PowerShell script. Specify \"${command:SpecifyScriptArgs}\" if you want to be prompted for the args.",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "cwd": {
                "type": "string",
                "description": "Absolute path to the working directory. Default is the current workspace folder.",
                "default": "${workspaceFolder}"
              },
              "createTemporaryIntegratedConsole": {
                "type": "boolean",
                "description": "Determines whether a temporary PowerShell Extension Terminal is created for each debugging session, useful for debugging PowerShell classes and binary modules.  Overrides the user setting 'powershell.debugging.createTemporaryIntegratedConsole'.",
                "default": false
              }
            }
          },
          "attach": {
            "properties": {
              "computerName": {
                "type": "string",
                "description": "Optional: The computer name to which a remote session will be established.  Works only on PowerShell 4 and above."
              },
              "processId": {
                "type": "string",
                "description": "The process id of the PowerShell host process to attach to.  Works only on PowerShell 5 and above.",
                "default": null
              },
              "runspaceId": {
                "type": [
                  "string",
                  "number"
                ],
                "description": "Optional: The ID of the runspace to debug in the attached process.  Defaults to 1.  Works only on PowerShell 5 and above.",
                "default": null
              },
              "runspaceName": {
                "type": "string",
                "description": "Optional: The Name of the runspace to debug in the attached process.  Works only on PowerShell 5 and above.",
                "default": null
              },
              "customPipeName": {
                "type": "string",
                "description": "The custom pipe name of the PowerShell host process to attach to.  Works only on PowerShell 6.2 and above.",
                "default": null
              }
            }
          }
        },
        "initialConfigurations": []
      }
    ],
    "configuration": {
      "type": "object",
      "title": "PowerShell",
      "properties": {
        "powershell.sideBar.CommandExplorerVisibility": {
          "type": "boolean",
          "default": true,
          "description": "Specifies the visibility of the Command Explorer in the PowerShell Side Bar."
        },
        "powershell.sideBar.CommandExplorerExcludeFilter": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Specify array of Modules to exclude from Command Explorer listing."
        },
        "powershell.powerShellAdditionalExePaths": {
          "type": "object",
          "description": "Specifies a list of versionName / exePath pairs where exePath points to a non-standard install location for PowerShell and versionName can be used to reference this path with the powershell.powerShellDefaultVersion setting.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "powershell.powerShellDefaultVersion": {
          "type": "string",
          "description": "Specifies the PowerShell version name, as displayed by the 'PowerShell: Show Session Menu' command, used when the extension loads e.g \"Windows PowerShell (x86)\" or \"PowerShell Core 7 (x64)\". You can specify additional PowerShell executables by using the \"powershell.powerShellAdditionalExePaths\" setting."
        },
        "powershell.powerShellExePath": {
          "type": "string",
          "default": "",
          "scope": "machine",
          "description": "REMOVED: Please use the \"powershell.powerShellAdditionalExePaths\" setting instead.",
          "deprecationMessage": "Please use the \"powershell.powerShellAdditionalExePaths\" setting instead."
        },
        "powershell.promptToUpdatePowerShell": {
          "type": "boolean",
          "description": "Specifies whether you should be prompted to update your version of PowerShell.",
          "default": true
        },
        "powershell.promptToUpdatePackageManagement": {
          "type": "boolean",
          "description": "REMOVED: Specifies whether you should be prompted to update your version of PackageManagement if it's under 1.4.6.",
          "default": false,
          "deprecationMessage": "This prompt has been removed as it's no longer strictly necessary to upgrade the PackageManagement module."
        },
        "powershell.startAsLoginShell.osx": {
          "type": "boolean",
          "default": true,
          "description": "Starts the PowerShell extension's underlying PowerShell process as a login shell, if applicable."
        },
        "powershell.startAsLoginShell.linux": {
          "type": "boolean",
          "default": false,
          "description": "Starts the PowerShell extension's underlying PowerShell process as a login shell, if applicable."
        },
        "powershell.startAutomatically": {
          "type": "boolean",
          "default": true,
          "description": "Starts PowerShell extension features automatically when a PowerShell file opens. If false, to start the extension, use the 'PowerShell: Restart Current Session' command. IntelliSense, code navigation, Extension Terminal, code formatting, and other features are not enabled until the extension starts."
        },
        "powershell.useX86Host": {
          "type": "boolean",
          "default": false,
          "description": "REMOVED: Uses the 32-bit language service on 64-bit Windows. This setting has no effect on 32-bit Windows or on the PowerShell extension debugger, which has its own architecture configuration.",
          "deprecationMessage": "This setting was removed when the PowerShell installation searcher was added. Please use the \"powershell.powerShellAdditionalExePaths\" setting instead."
        },
        "powershell.enableProfileLoading": {
          "type": "boolean",
          "default": true,
          "description": "Loads user and system-wide PowerShell profiles (profile.ps1 and Microsoft.VSCode_profile.ps1) into the PowerShell session. This affects IntelliSense and interactive script execution, but it does not affect the debugger."
        },
        "powershell.enableReferencesCodeLens": {
          "type": "boolean",
          "default": true,
          "description": "Displays a code lens above function definitions showing the number of times the function is referenced in the workspace. Large workspaces should disable this setting due to high performance impact."
        },
        "powershell.bugReporting.project": {
          "type": "string",
          "default": "https://github.com/PowerShell/vscode-powershell",
          "description": "Specifies the URL of the GitHub project in which to generate bug reports."
        },
        "powershell.helpCompletion": {
          "type": "string",
          "enum": [
            "Disabled",
            "BlockComment",
            "LineComment"
          ],
          "default": "BlockComment",
          "description": "Controls the comment-based help completion behavior triggered by typing '##'. Set the generated help style with 'BlockComment' or 'LineComment'. Disable the feature with 'Disabled'."
        },
        "powershell.cwd": {
          "type": "string",
          "default": null,
          "description": "An explicit start path where the PowerShell Extension Terminal will be launched. Both the PowerShell process's and the shell's location will be set to this directory. A fully resolved path must be provided!"
        },
        "powershell.scriptAnalysis.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enables real-time script analysis from PowerShell Script Analyzer. Uses the newest installed version of the PSScriptAnalyzer module or the version bundled with this extension, if it is newer."
        },
        "powershell.scriptAnalysis.settingsPath": {
          "type": "string",
          "default": "PSScriptAnalyzerSettings.psd1",
          "description": "Specifies the path to a PowerShell Script Analyzer settings file. To override the default settings for all projects, enter an absolute path, or enter a path relative to your workspace."
        },
        "powershell.codeFolding.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enables syntax based code folding. When disabled, the default indentation based code folding is used."
        },
        "powershell.codeFolding.showLastLine": {
          "type": "boolean",
          "default": true,
          "description": "Shows the last line of a folded section similar to the default VSCode folding style. When disabled, the entire folded region is hidden."
        },
        "powershell.codeFormatting.autoCorrectAliases": {
          "type": "boolean",
          "default": false,
          "description": "Replaces aliases with their aliased name."
        },
        "powershell.codeFormatting.preset": {
          "type": "string",
          "enum": [
            "Custom",
            "Allman",
            "OTBS",
            "Stroustrup"
          ],
          "default": "Custom",
          "description": "Sets the codeformatting options to follow the given indent style in a way that is compatible with PowerShell syntax. For more information about the brace styles please refer to https://github.com/PoshCode/PowerShellPracticeAndStyle/issues/81."
        },
        "powershell.codeFormatting.openBraceOnSameLine": {
          "type": "boolean",
          "default": true,
          "description": "Places open brace on the same line as its associated statement."
        },
        "powershell.codeFormatting.newLineAfterOpenBrace": {
          "type": "boolean",
          "default": true,
          "description": "Adds a newline (line break) after an open brace."
        },
        "powershell.codeFormatting.newLineAfterCloseBrace": {
          "type": "boolean",
          "default": true,
          "description": "Adds a newline (line break) after a closing brace."
        },
        "powershell.codeFormatting.pipelineIndentationStyle": {
          "type": "string",
          "enum": [
            "IncreaseIndentationForFirstPipeline",
            "IncreaseIndentationAfterEveryPipeline",
            "NoIndentation",
            "None"
          ],
          "default": "NoIndentation",
          "description": "Multi-line pipeline style settings (default: NoIndentation)."
        },
        "powershell.codeFormatting.whitespaceBeforeOpenBrace": {
          "type": "boolean",
          "default": true,
          "description": "Adds a space between a keyword and its associated scriptblock expression."
        },
        "powershell.codeFormatting.whitespaceBeforeOpenParen": {
          "type": "boolean",
          "default": true,
          "description": "Adds a space between a keyword (if, elseif, while, switch, etc) and its associated conditional expression."
        },
        "powershell.codeFormatting.whitespaceAroundOperator": {
          "type": "boolean",
          "default": true,
          "description": "Adds spaces before and after an operator ('=', '+', '-', etc.)."
        },
        "powershell.codeFormatting.whitespaceAfterSeparator": {
          "type": "boolean",
          "default": true,
          "description": "Adds a space after a separator (',' and ';')."
        },
        "powershell.codeFormatting.whitespaceInsideBrace": {
          "type": "boolean",
          "default": true,
          "description": "Adds a space after an opening brace ('{') and before a closing brace ('}')."
        },
        "powershell.codeFormatting.whitespaceBetweenParameters": {
          "type": "boolean",
          "default": false,
          "description": "Removes redundant whitespace between parameters."
        },
        "powershell.codeFormatting.whitespaceAroundPipe": {
          "type": "boolean",
          "default": true,
          "description": "REMOVED. Please use the \"powershell.codeFormatting.addWhitespaceAroundPipe\" setting instead. If you've used this setting before, we have moved it for you automatically.",
          "deprecationMessage": "Please use the \"powershell.codeFormatting.addWhitespaceAroundPipe\" setting instead. If you've used this setting before, we have moved it for you automatically."
        },
        "powershell.codeFormatting.addWhitespaceAroundPipe": {
          "type": "boolean",
          "default": true,
          "description": "Adds a space before and after the pipeline operator ('|') if it is missing."
        },
        "powershell.codeFormatting.trimWhitespaceAroundPipe": {
          "type": "boolean",
          "default": false,
          "description": "Trims extraneous whitespace (more than 1 character) before and after the pipeline operator ('|')."
        },
        "powershell.codeFormatting.ignoreOneLineBlock": {
          "type": "boolean",
          "default": true,
          "description": "Does not reformat one-line code blocks, such as \"if (...) {...} else {...}\"."
        },
        "powershell.codeFormatting.alignPropertyValuePairs": {
          "type": "boolean",
          "default": true,
          "description": "Align assignment statements in a hashtable or a DSC Configuration."
        },
        "powershell.codeFormatting.useConstantStrings": {
          "type": "boolean",
          "default": false,
          "description": "Use single quotes if a string is not interpolated and its value does not contain a single quote."
        },
        "powershell.codeFormatting.useCorrectCasing": {
          "type": "boolean",
          "default": false,
          "description": "Use correct casing for cmdlets."
        },
        "powershell.integratedConsole.showOnStartup": {
          "type": "boolean",
          "default": true,
          "description": "Shows the Extension Terminal when the PowerShell extension is initialized. When disabled, the pane is not opened on startup, but the Extension Terminal is still created in order to power the extension's features."
        },
        "powershell.integratedConsole.startInBackground": {
          "type": "boolean",
          "default": false,
          "description": "Starts the Extension Terminal in the background. WARNING: If this is enabled, to access the terminal you must run the 'Show Extension Terminal' command, and once shown it cannot be put back into the background. This option completely hides the Extension Terminal from the terminals pane. You are probably looking for the 'showOnStartup' option instead."
        },
        "powershell.integratedConsole.focusConsoleOnExecute": {
          "type": "boolean",
          "default": true,
          "description": "Switches focus to the console when a script selection is run or a script file is debugged. This is an accessibility feature. To disable it, set to false."
        },
        "powershell.integratedConsole.useLegacyReadLine": {
          "type": "boolean",
          "default": false,
          "description": "Falls back to the legacy ReadLine experience. This will disable the use of PSReadLine in the PowerShell Extension Terminal."
        },
        "powershell.integratedConsole.forceClearScrollbackBuffer": {
          "type": "boolean",
          "description": "Use the vscode API to clear the terminal since that's the only reliable way to clear the scrollback buffer. Turn this on if you're used to 'Clear-Host' clearing scroll history as well as clear-terminal-via-lsp."
        },
        "powershell.integratedConsole.suppressStartupBanner": {
          "type": "boolean",
          "default": false,
          "description": "Do not show the Powershell Extension Terminal banner on launch"
        },
        "powershell.debugging.createTemporaryIntegratedConsole": {
          "type": "boolean",
          "default": false,
          "description": "Determines whether a temporary PowerShell Extension Terminal is created for each debugging session. Useful for debugging PowerShell classes and binary modules."
        },
        "powershell.developer.bundledModulesPath": {
          "type": "string",
          "description": "Specifies an alternate path to the folder containing modules that are bundled with the PowerShell extension (i.e. PowerShell Editor Services, PSScriptAnalyzer, Plaster)"
        },
        "powershell.developer.editorServicesLogLevel": {
          "type": "string",
          "enum": [
            "Diagnostic",
            "Verbose",
            "Normal",
            "Warning",
            "Error",
            "None"
          ],
          "default": "Normal",
          "description": "Sets the logging verbosity level for the PowerShell Editor Services host executable.  Valid values are 'Diagnostic', 'Verbose', 'Normal', 'Warning', 'Error', and 'None'"
        },
        "powershell.developer.editorServicesWaitForDebugger": {
          "type": "boolean",
          "default": false,
          "description": "Launches the language service with the /waitForDebugger flag to force it to wait for a .NET debugger to attach before proceeding."
        },
        "powershell.developer.featureFlags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "An array of strings that enable experimental features in the PowerShell extension."
        },
        "powershell.developer.waitForSessionFileTimeoutSeconds": {
          "type": "number",
          "default": 240,
          "description": "When the PowerShell extension is starting up, it checks for a session file in order to connect to the language server. This setting determines how long until checking for the session file times out. (default is 240 seconds or 4 minutes)"
        },
        "powershell.pester.useLegacyCodeLens": {
          "type": "boolean",
          "default": true,
          "description": "Use a CodeLens that is compatible with Pester 4. Disabling this will show 'Run Tests' on all It, Describe and Context blocks, and will correctly work only with Pester 5 and newer."
        },
        "powershell.pester.codeLens": {
          "type": "boolean",
          "default": true,
          "description": "This setting controls the appearance of the 'Run Tests' and 'Debug Tests' CodeLenses that appears above Pester tests."
        },
        "powershell.pester.outputVerbosity": {
          "type": "string",
          "enum": [
            "FromPreference",
            "None",
            "Minimal",
            "Normal",
            "Detailed",
            "Diagnostic"
          ],
          "default": "FromPreference",
          "description": "Defines the verbosity of output to be used. For Pester 5 and newer the default value FromPreference, will use the Output settings from the $PesterPreference defined in the caller context, and will default to Normal if there is none. For Pester 4 the FromPreference and Normal options map to All, and Minimal option maps to Fails."
        },
        "powershell.pester.debugOutputVerbosity": {
          "type": "string",
          "enum": [
            "None",
            "Minimal",
            "Normal",
            "Detailed",
            "Diagnostic"
          ],
          "default": "Diagnostic",
          "description": "Defines the verbosity of output to be used when debugging a test or a block. For Pester 5 and newer the default value Diagnostic will print additional information about discovery, skipped and filtered tests, mocking and more."
        },
        "powershell.buttons.showRunButtons": {
          "type": "boolean",
          "default": true,
          "description": "Show the Run and Run Selection buttons in the editor title-bar."
        },
        "powershell.buttons.showPanelMovementButtons": {
          "type": "boolean",
          "default": false,
          "description": "Show buttons in the editor title-bar for moving the panel around."
        }
      }
    },
    "capabilities": {
      "untrustedWorkspaces": {
        "supported": false
      }
    },
    "configurationDefaults": {
      "[powershell]": {
        "debug.saveBeforeStart": "nonUntitledEditorsInActiveGroup",
        "editor.semanticHighlighting.enabled": false,
        "editor.wordSeparators": "`~!@#$%^&*()=+[{]}\\|;:'\",.<>/?"
      }
    },
    "themes": [
      {
        "label": "PowerShell ISE",
        "uiTheme": "vs",
        "path": "./themes/theme-psise/theme.json"
      }
    ],
    "walkthroughs": [
      {
        "id": "PowerShell",
        "title": "Get Started with PowerShell",
        "description": "Set up your environment and see what the PowerShell Extension in Visual Studio Code can help you achieve!",
        "steps": [
          {
            "id": "version",
            "title": "Choose a version of PowerShell",
            "media": {
              "markdown": "media/walkthrough.md"
            },
            "description": "There are multiple versions of PowerShell that you can use with the extension! Choose the version that best fits your needs here.\nFor the newest version of PowerShell, install PowerShell 7 or run ``iex \"& { $(irm https://aka.ms/install-powershell.ps1) } -UseMSI\"``\n[Install PowerShell 7](https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell?view=powershell-7.2)\n⭐️ Latest version ― if you want the latest and greatest capabilities.\n💻 Can be used to manage multiple operating systems.\n👥 [Open Source](https://github.com/powershell/powershell) and community-focused!"
          },
          {
            "id": "file",
            "title": "Create a PowerShell file",
            "media": {
              "markdown": "media/walkthrough.md"
            },
            "description": "[Create](command:toSide:workbench.action.files.newUntitledFile?%7B%22languageId%22%3A%22powershell%22%7D) or [open](command:toSide:workbench.action.files.openFolder) a PowerShell file, make sure to save it as ``.ps1``\n[Create a File](command:toSide:workbench.action.files.newUntitledFile?%7B%22languageId%22%3A%22powershell%22%7D)\n**Tip:** Use keyboard shortcut ``Ctrl+N`` to open a new script file or ``Ctrl+O`` to open a file."
          },
          {
            "id": "sessions",
            "title": "Switch sessions",
            "media": {
              "markdown": "media/walkthrough.md"
            },
            "description": "To switch between PowerShell 7 and Windows PowerShell 5.1, use the menu:\n[Open PowerShell Sessions Menu](command:PowerShell.ShowSessionMenu)\nYou can pin the [PowerShell Language Status Icon](https://github.com/PowerShell/vscode-powershell/blob/main/docs/troubleshooting.md#how-do-i-change-the-powershell-version) to the status bar in the bottom right-hand corner to easily switch sessions.",
            "completionEvents": [
              "onCommand:PowerShell.ShowSessionConsole"
            ]
          },
          {
            "id": "ise",
            "title": "Try ISE mode",
            "media": {
              "markdown": "media/walkthrough.md"
            },
            "description": "If you are familiar with the Windows PowerShell ISE and would like to configure your settings to simulate the ISE Experience, try the ISE Mode.\n[Toggle ISE Mode](command:PowerShell.ToggleISEMode)",
            "completionEvents": [
              "onCommand:PowerShell.ToggleISEMode"
            ]
          },
          {
            "id": "terminal",
            "title": "Open the PowerShell Extension Terminal",
            "media": {
              "markdown": "media/walkthrough.md"
            },
            "description": "The PowerShell Extension Terminal will run whenever the extension starts in order to enable the its features.\n[Show Panel](command:PowerShell.ShowSessionConsole)\nIf you don't want the terminal panel to open on startup, you can keep the panel closed by configuring ``powershell.integratedConsole.showOnStartup`` in your settings.\n[Close Panel](command:PowerShell.ClosePanel)\n**Tip:** Use keyboard shortcut ``Ctrl+``` to open and close terminal."
          },
          {
            "id": "explore",
            "title": "Explore more resources",
            "media": {
              "markdown": "media/walkthrough.md"
            },
            "description": "Now you are ready to start using the PowerShell Extension on your own and explore more resources!\n📚 See the PowerShell Extension's [documentation](https://docs.microsoft.com/en-us/powershell/scripting/dev-cross-plat/vscode/using-vscode?view=powershell-7.2)\nℹ️ View Visual Studio Code's [documentation](https://code.visualstudio.com/docs/languages/powershell)\n🔌 Plug into the [PowerShell Community](https://docs.microsoft.com/en-us/powershell/scripting/community/community-support?view=powershell-7.2)\n📄 Take a look at our [Release Notes](https://docs.microsoft.com/en-us/powershell/scripting/whats-new/what-s-new-in-powershell-73?view=powershell-7.2)"
          },
          {
            "id": "feedback",
            "title": "Share your feedback",
            "media": {
              "markdown": "media/walkthrough.md"
            },
            "description": "How has this walkthrough affected your confidence level when using the PowerShell Extension?\n[I feel less confident](command:PowerShell.WalkthroughTelemetry?%7B%22satisfaction%22%3A3%7D)\n[My confidence has not been affected](command:PowerShell.WalkthroughTelemetry?%7B%22satisfaction%22%3A2%7D)\n[I feel more confident](command:PowerShell.WalkthroughTelemetry?%7B%22satisfaction%22%3A1%7D)"
          }
        ]
      }
    ]
  },
  "private": true
}
