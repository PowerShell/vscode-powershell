{
  "name": "powershell-preview",
  "displayName": "PowerShell Preview",
  "version": "2020.9.0",
  "preview": true,
  "publisher": "ms-vscode",
  "description": "(Preview) Develop PowerShell scripts in Visual Studio Code!",
  "engines": {
    "vscode": "^1.44.0"
  },
  "license": "SEE LICENSE IN LICENSE.txt",
  "homepage": "https://github.com/PowerShell/vscode-powershell/blob/master/README.md",
  "categories": [
    "Debuggers",
    "Programming Languages",
    "Snippets",
    "Linters"
  ],
  "icon": "images/PowerShell_icon.png",
  "galleryBanner": {
    "color": "#ACD1EC",
    "theme": "light"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/PowerShell/vscode-powershell.git"
  },
  "main": "./out/src/main",
  "enableProposedApi": true,
  "activationEvents": [
    "onDebugInitialConfigurations",
    "onDebugResolve:PowerShell",
    "onLanguage:powershell",
    "onCommand:PowerShell.NewProjectFromTemplate",
    "onCommand:PowerShell.OpenExamplesFolder",
    "onCommand:PowerShell.PickPSHostProcess",
    "onCommand:PowerShell.PickRunspace",
    "onCommand:PowerShell.SpecifyScriptArgs",
    "onCommand:PowerShell.ShowSessionConsole",
    "onCommand:PowerShell.ShowSessionMenu",
    "onCommand:PowerShell.RestartSession",
    "onCommand:PowerShell.EnableISEMode",
    "onCommand:PowerShell.DisableISEMode",
    "onCommand:PowerShell.RegisterExternalExtension",
    "onCommand:PowerShell.UnregisterExternalExtension",
    "onCommand:PowerShell.GetPowerShellVersionDetails",
    "onView:PowerShellCommands",
    "onNotebook:PowerShellNotebookModeDefault",
    "onNotebookEditor:PowerShellNotebookModeDefault",
    "onNotebook:PowerShellNotebookModeOption",
    "onNotebookEditor:PowerShellNotebookModeOption"
  ],
  "dependencies": {
    "node-fetch": "^2.6.1",
    "semver": "^7.3.2",
    "uuid": "^8.3.0",
    "vscode-extension-telemetry": "~0.1.6",
    "vscode-languageclient": "^7.0.0-next.9",
    "vscode-languageserver-protocol": "^3.16.0-next.7"
  },
  "devDependencies": {
    "@types/glob": "^7.1.3",
    "@types/mocha": "~7.0.2",
    "@types/mock-fs": "~4.10.0",
    "@types/node": "~14.10.1",
    "@types/node-fetch": "~2.5.7",
    "@types/rewire": "~2.5.28",
    "@types/semver": "~7.3.4",
    "@types/sinon": "~9.0.5",
    "@types/uuid": "^8.3.0",
    "@types/vscode": "1.44.0",
    "mocha": "~5.2.0",
    "mocha-junit-reporter": "~2.0.0",
    "mocha-multi-reporters": "~1.1.7",
    "mock-fs": "~4.13.0",
    "rewire": "~5.0.0",
    "sinon": "~9.0.3",
    "tslint": "~6.1.3",
    "typescript": "~4.0.2",
    "vsce": "~1.79.5",
    "vscode-test": "~1.4.0",
    "vscode-dts": "~0.3.1"
  },
  "extensionDependencies": [
    "vscode.powershell"
  ],
  "scripts": {
    "compile": "tsc -v && tsc -p ./ && tslint -p ./",
    "compile-watch": "tsc -watch -p ./",
    "test": "node ./out/test/runTests.js",
    "download-api": "vscode-dts dev"
  },
  "contributes": {
    "breakpoints": [
      {
        "language": "powershell"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "PowerShellCommandExplorer",
          "title": "(Preview) PowerShell Command Explorer",
          "icon": "media/pwsh.svg"
        }
      ]
    },
    "views": {
      "PowerShellCommandExplorer": [
        {
          "id": "PowerShellCommands",
          "name": "PowerShell Commands",
          "when": "config.powershell.sideBar.CommandExplorerVisibility"
        }
      ]
    },
    "notebookProvider": [
      {
        "viewType": "PowerShellNotebookModeDefault",
        "displayName": "Powershell Notebook",
        "selector": [
          {
            "filenamePattern": "*.Notebook.ps1"
          }
        ],
        "priority": "default"
      },
      {
        "viewType": "PowerShellNotebookModeOption",
        "displayName": "Powershell Notebook",
        "selector": [
          {
            "excludeFileNamePattern": "*.Notebook.ps1",
            "filenamePattern": "*.ps1"
          }
        ],
        "priority": "option"
      }
    ],
    "keybindings": [
      {
        "command": "PowerShell.ShowHelp",
        "key": "ctrl+f1",
        "when": "editorTextFocus && editorLangId == 'powershell'"
      },
      {
        "command": "PowerShell.ExpandAlias",
        "key": "shift+alt+e",
        "when": "editorTextFocus && editorLangId == 'powershell'"
      },
      {
        "command": "PowerShell.ShowAdditionalCommands",
        "key": "shift+alt+s",
        "when": "editorTextFocus && editorLangId == 'powershell'"
      },
      {
        "command": "PowerShell.RunSelection",
        "key": "f8",
        "when": "editorTextFocus && editorLangId == 'powershell'"
      },
      {
        "command": "editor.action.insertSnippet",
        "when": "editorTextFocus && editorLangId == 'powershell'",
        "mac": "cmd+alt+j",
        "win": "ctrl+alt+j",
        "linux": "ctrl+alt+j"
      }
    ],
    "commands": [
      {
        "command": "PowerShell.ExpandAlias",
        "title": "Expand Alias",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.EnableISEMode",
        "title": "Enable ISE Mode",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.DisableISEMode",
        "title": "Disable ISE Mode (restore to defaults)",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.RefreshCommandsExplorer",
        "title": "Refresh Command Explorer",
        "icon": {
          "light": "resources/light/sync.svg",
          "dark": "resources/dark/sync.svg"
        },
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.InsertCommand",
        "title": "Insert Command",
        "icon": {
          "light": "resources/light/pencil.svg",
          "dark": "resources/dark/pencil.svg"
        },
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.OnlineHelp",
        "title": "Get Online Help for Command (Deprecated)",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.ShowHelp",
        "title": "Get Help for Command",
        "icon": {
          "light": "resources/light/question.svg",
          "dark": "resources/dark/question.svg"
        },
        "category": "PowerShell"
      },
      {
        "command": "workbench.action.debug.start",
        "title": "Run",
        "category": "PowerShell",
        "icon": {
          "light": "resources/light/run.svg",
          "dark": "resources/dark/run.svg"
        }
      },
      {
        "command": "PowerShell.RunSelection",
        "title": "Run Selection",
        "category": "PowerShell",
        "icon": {
          "light": "resources/light/play.svg",
          "dark": "resources/dark/play.svg"
        }
      },
      {
        "command": "PowerShell.EnableNotebookMode",
        "title": "(Preview) Enable Notebook Mode",
        "category": "PowerShell",
        "icon": {
          "light": "resources/light/book.svg",
          "dark": "resources/dark/book.svg"
        }
      },
      {
        "command": "PowerShell.DisableNotebookMode",
        "title": "(Preview) Disable Notebook Mode",
        "category": "PowerShell",
        "icon": {
          "light": "resources/light/file-code.svg",
          "dark": "resources/dark/file-code.svg"
        }
      },
      {
        "command": "PowerShell.RestartSession",
        "title": "Restart Current Session",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.ShowLogs",
        "title": "Show PowerShell Extension Logs",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.OpenLogFolder",
        "title": "Open PowerShell Extension Logs Folder",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.GenerateBugReport",
        "title": "Upload Bug Report to Github",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.OpenInISE",
        "title": "Open Current File in PowerShell ISE",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.PowerShellFindModule",
        "title": "Find/Install PowerShell Modules from the Gallery",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.ShowAdditionalCommands",
        "title": "Show Additional Commands from PowerShell Modules",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.ShowSessionMenu",
        "title": "Show Session Menu",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.ShowSessionConsole",
        "title": "Show Integrated Console",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.NewProjectFromTemplate",
        "title": "Create New Project from Plaster Template",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.RunPesterTestsFromFile",
        "title": "Run Pester tests",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.DebugPesterTestsFromFile",
        "title": "Debug Pester tests",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.OpenExamplesFolder",
        "title": "Open Examples Folder",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.InvokeRegisteredEditorCommand",
        "title": "Invoke Registered Editor Command",
        "category": "PowerShell"
      },
      {
        "command": "workbench.action.closePanel",
        "title": "Close panel",
        "category": "PowerShell",
        "icon": {
          "light": "resources/light/ClosePanel.svg",
          "dark": "resources/dark/ClosePanel.svg"
        }
      },
      {
        "command": "workbench.action.positionPanelLeft",
        "title": "Move panel left",
        "category": "PowerShell",
        "icon": {
          "light": "resources/light/MovePanelLeft.svg",
          "dark": "resources/dark/MovePanelLeft.svg"
        }
      },
      {
        "command": "workbench.action.positionPanelBottom",
        "title": "Move panel to bottom",
        "category": "PowerShell",
        "icon": {
          "light": "resources/light/MovePanelBottom.svg",
          "dark": "resources/dark/MovePanelBottom.svg"
        }
      },
      {
        "command": "PowerShell.RegisterExternalExtension",
        "title": "Register an external extension",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.UnregisterExternalExtension",
        "title": "Unregister an external extension",
        "category": "PowerShell"
      },
      {
        "command": "PowerShell.GetPowerShellVersionDetails",
        "title": "Get details about the PowerShell version that the PowerShell extension is using",
        "category": "PowerShell"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "PowerShell.InsertCommand",
          "when": "false"
        },
        {
          "command": "PowerShell.RefreshCommandsExplorer",
          "when": "config.powershell.sideBar.CommandExplorerVisibility"
        },
        {
          "command": "PowerShell.InvokeRegisteredEditorCommand",
          "when": "false"
        }
      ],
      "explorer/context": [
        {
          "command": "PowerShell.RunPesterTestsFromFile",
          "when": "resourceFilename =~ /\\.tests\\.ps1$/i"
        },
        {
          "command": "PowerShell.DebugPesterTestsFromFile",
          "when": "resourceFilename =~ /\\.tests\\.ps1$/i"
        }
      ],
      "editor/context": [
        {
          "when": "editorLangId == powershell",
          "command": "PowerShell.RunSelection",
          "group": "2_powershell"
        },
        {
          "when": "editorLangId == powershell",
          "command": "PowerShell.ShowHelp",
          "group": "2_powershell"
        }
      ],
      "editor/title": [
        {
          "when": "editorLangId == powershell && config.powershell.buttons.showPanelMovementButtons",
          "command": "workbench.action.positionPanelBottom",
          "group": "navigation@97"
        },
        {
          "when": "editorLangId == powershell && config.powershell.buttons.showPanelMovementButtons",
          "command": "workbench.action.positionPanelLeft",
          "group": "navigation@98"
        },
        {
          "when": "editorLangId == powershell && config.powershell.buttons.showPanelMovementButtons",
          "command": "workbench.action.closePanel",
          "group": "navigation@99"
        },
        {
          "when": "editorLangId == powershell && config.powershell.buttons.showRunButtons",
          "command": "workbench.action.debug.start",
          "group": "navigation@100"
        },
        {
          "when": "editorLangId == powershell && config.powershell.buttons.showRunButtons",
          "command": "PowerShell.RunSelection",
          "group": "navigation@101"
        },
        {
          "when": "editorLangId == powershell && config.powershell.notebooks.showToggleButton",
          "command": "PowerShell.EnableNotebookMode",
          "group": "navigation@102"
        },
        {
          "when": "resourceLangId == powershell && notebookEditorFocused",
          "command": "PowerShell.DisableNotebookMode",
          "group": "navigation@102"
        }
      ],
      "editor/title/context": [
        {
          "when": "resourceFilename =~ /\\.tests\\.ps1$/i",
          "command": "PowerShell.RunPesterTestsFromFile"
        },
        {
          "when": "resourceFilename =~ /\\.tests\\.ps1$/i",
          "command": "PowerShell.DebugPesterTestsFromFile"
        }
      ],
      "view/title": [
        {
          "command": "PowerShell.RefreshCommandsExplorer",
          "when": "view == PowerShellCommands",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "PowerShell.ShowHelp",
          "when": "view == PowerShellCommands",
          "group": "inline@1"
        },
        {
          "command": "PowerShell.InsertCommand",
          "when": "view == PowerShellCommands",
          "group": "inline@2"
        }
      ]
    },
    "problemMatchers": [
      {
        "name": "pester",
        "owner": "powershell",
        "fileLocation": [
          "absolute"
        ],
        "severity": "error",
        "pattern": [
          {
            "regexp": "^\\s*(?:\\[-\\]\\s+)(.*?)(?:\\s+\\d+\\.?\\d*\\s*m?s)\\s*$",
            "message": 1
          },
          {
            "regexp": "^\\s+[Aa]t\\s+([^,]+,)?(.+?):(\\s+line\\s+)?(\\d+)(\\s+char:\\d+)?$",
            "file": 2,
            "line": 4
          }
        ]
      }
    ],
    "snippets": [
      {
        "language": "powershell",
        "path": "./snippets/PowerShell.json"
      }
    ],
    "debuggers": [
      {
        "type": "PowerShell",
        "label": "PowerShell",
        "variables": {
          "PickPSHostProcess": "PowerShell.PickPSHostProcess",
          "PickRunspace": "PowerShell.PickRunspace",
          "SpecifyScriptArgs": "PowerShell.SpecifyScriptArgs"
        },
        "languages": [
          "powershell"
        ],
        "configurationSnippets": [
          {
            "label": "PowerShell: Launch Current File",
            "description": "Launch and debug the file in the currently active editor window",
            "body": {
              "name": "PowerShell Launch Current File",
              "type": "PowerShell",
              "request": "launch",
              "script": "^\"\\${file}\"",
              "cwd": "^\"\\${file}\""
            }
          },
          {
            "label": "PowerShell: Launch Script",
            "description": "Launch and debug the specified file or command",
            "body": {
              "name": "PowerShell Launch Script",
              "type": "PowerShell",
              "request": "launch",
              "script": "^\"enter path or command to execute e.g.: \\${workspaceFolder}/src/foo.ps1 or Invoke-Pester\"",
              "cwd": "^\"\\${workspaceFolder}\""
            }
          },
          {
            "label": "PowerShell: Interactive Session",
            "description": "Debug commands executed from the Integrated Console",
            "body": {
              "name": "PowerShell Interactive Session",
              "type": "PowerShell",
              "request": "launch",
              "cwd": ""
            }
          },
          {
            "label": "PowerShell: Attach to PowerShell Host Process",
            "description": "Attach the debugger to a running PowerShell Host Process",
            "body": {
              "name": "PowerShell Attach to Host Process",
              "type": "PowerShell",
              "request": "attach",
              "runspaceId": 1
            }
          },
          {
            "label": "PowerShell: Attach Interactive Session Runspace",
            "description": "Open runspace picker to select runspace to attach debugger to",
            "body": {
              "name": "PowerShell Attach Interactive Session Runspace",
              "type": "PowerShell",
              "request": "attach",
              "processId": "current"
            }
          }
        ],
        "configurationAttributes": {
          "launch": {
            "properties": {
              "script": {
                "type": "string",
                "description": "Optional: Absolute path to the PowerShell script to launch under the debugger."
              },
              "args": {
                "type": "array",
                "description": "Command line arguments to pass to the PowerShell script. Specify \"${command:SpecifyScriptArgs}\" if you want to be prompted for the args.",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "cwd": {
                "type": "string",
                "description": "Absolute path to the working directory. Default is the current workspace folder.",
                "default": "${workspaceFolder}"
              },
              "createTemporaryIntegratedConsole": {
                "type": "boolean",
                "description": "Determines whether a temporary PowerShell Integrated Console is created for each debugging session, useful for debugging PowerShell classes and binary modules.  Overrides the user setting 'powershell.debugging.createTemporaryIntegratedConsole'.",
                "default": false
              }
            }
          },
          "attach": {
            "properties": {
              "computerName": {
                "type": "string",
                "description": "Optional: The computer name to which a remote session will be established.  Works only on PowerShell 4 and above."
              },
              "processId": {
                "type": "string",
                "description": "The process id of the PowerShell host process to attach to.  Works only on PowerShell 5 and above.",
                "default": null
              },
              "runspaceId": {
                "type": [
                  "string",
                  "number"
                ],
                "description": "Optional: The ID of the runspace to debug in the attached process.  Defaults to 1.  Works only on PowerShell 5 and above.",
                "default": null
              },
              "runspaceName": {
                "type": "string",
                "description": "Optional: The Name of the runspace to debug in the attached process.  Works only on PowerShell 5 and above.",
                "default": null
              },
              "customPipeName": {
                "type": "string",
                "description": "The custom pipe name of the PowerShell host process to attach to.  Works only on PowerShell 6.2 and above.",
                "default": null
              }
            }
          }
        },
        "initialConfigurations": []
      }
    ],
    "configuration": {
      "type": "object",
      "title": "PowerShell Configuration",
      "properties": {
        "powershell.sideBar.CommandExplorerVisibility": {
          "type": "boolean",
          "default": true,
          "description": "Specifies the visibility of the Command Explorer in the PowerShell Side Bar."
        },
        "powershell.sideBar.CommandExplorerExcludeFilter": {
          "type": "array",
          "default": [],
          "description": "Specify array of Modules to exclude from Command Explorer listing."
        },
        "powershell.powerShellAdditionalExePaths": {
          "type": "array",
          "description": "Specifies an array of versionName / exePath pairs where exePath points to a non-standard install location for PowerShell and versionName can be used to reference this path with the powershell.powerShellDefaultVersion setting.",
          "scope": "machine",
          "uniqueItems": true,
          "items": {
            "type": "object",
            "required": [
              "versionName",
              "exePath"
            ],
            "properties": {
              "versionName": {
                "type": "string",
                "description": "Specifies the version name of this PowerShell executable. The version name can be referenced via the powershell.powerShellDefaultVersion setting."
              },
              "exePath": {
                "type": "string",
                "description": "Specifies the path to the PowerShell executable. Typically this is a path to a non-standard install location."
              }
            }
          }
        },
        "powershell.powerShellDefaultVersion": {
          "type": "string",
          "description": "Specifies the PowerShell version name, as displayed by the 'PowerShell: Show Session Menu' command, used when the extension loads e.g \"Windows PowerShell (x86)\" or \"PowerShell Core 6 (x64)\". You can specify additional PowerShell executables by using the \"powershell.powerShellAdditionalExePaths\" setting."
        },
        "powershell.powerShellExePath": {
          "type": "string",
          "default": "",
          "scope": "machine",
          "description": "REMOVED. Please use the \"powershell.powerShellDefaultVersion\" setting instead."
        },
        "powershell.promptToUpdatePowerShell": {
          "type": "boolean",
          "description": "Specifies whether you should be prompted to update your version of PowerShell.",
          "default": true
        },
        "powershell.promptToUpdatePackageManagement": {
          "type": "boolean",
          "description": "Specifies whether you should be prompted to update your version of PackageManagement if it's under 1.4.6.",
          "default": true
        },
        "powershell.startAsLoginShell.osx": {
          "type": "boolean",
          "default": true,
          "description": "Starts the PowerShell extension's underlying PowerShell process as a login shell, if applicable."
        },
        "powershell.startAsLoginShell.linux": {
          "type": "boolean",
          "default": false,
          "description": "Starts the PowerShell extension's underlying PowerShell process as a login shell, if applicable."
        },
        "powershell.startAutomatically": {
          "type": "boolean",
          "default": true,
          "description": "Starts PowerShell extension features automatically when a PowerShell file opens. If false, to start the extension, use the 'PowerShell: Restart Current Session' command. IntelliSense, code navigation, integrated console, code formatting, and other features are not enabled until the extension starts."
        },
        "powershell.useX86Host": {
          "type": "boolean",
          "default": false,
          "description": "Uses the 32-bit language service on 64-bit Windows. This setting has no effect on 32-bit Windows or on the PowerShell extension debugger, which has its own architecture configuration."
        },
        "powershell.enableProfileLoading": {
          "type": "boolean",
          "default": true,
          "description": "Loads user and system-wide PowerShell profiles (profile.ps1 and Microsoft.VSCode_profile.ps1) into the PowerShell session. This affects IntelliSense and interactive script execution, but it does not affect the debugger."
        },
        "powershell.bugReporting.project": {
          "type": "string",
          "default": "https://github.com/PowerShell/vscode-powershell",
          "description": "Specifies the url of the GitHub project in which to generate bug reports."
        },
        "powershell.helpCompletion": {
          "type": "string",
          "enum": [
            "Disabled",
            "BlockComment",
            "LineComment"
          ],
          "default": "BlockComment",
          "description": "Controls the comment-based help completion behavior triggered by typing '##'. Set the generated help style with 'BlockComment' or 'LineComment'. Disable the feature with 'Disabled'."
        },
        "powershell.cwd": {
          "type": "string",
          "default": null,
          "description": "An explicit start path where the Powershell Integrated Console will be launched. Both the PowerShell process and the shell's location will be set to this directory. Predefined variables can be used (i.e. ${fileDirname} to use the current opened file's directory)."
        },
        "powershell.scriptAnalysis.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enables real-time script analysis from PowerShell Script Analyzer. Uses the newest installed version of the PSScriptAnalyzer module or the version bundled with this extension, if it is newer."
        },
        "powershell.scriptAnalysis.settingsPath": {
          "type": "string",
          "default": "PSScriptAnalyzerSettings.psd1",
          "description": "Specifies the path to a PowerShell Script Analyzer settings file. To override the default settings for all projects, enter an absolute path, or enter a path relative to your workspace."
        },
        "powershell.codeFolding.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enables syntax based code folding. When disabled, the default indentation based code folding is used."
        },
        "powershell.codeFolding.showLastLine": {
          "type": "boolean",
          "default": true,
          "description": "Shows the last line of a folded section similar to the default VSCode folding style. When disabled, the entire folded region is hidden."
        },
        "powershell.codeFormatting.autoCorrectAliases": {
          "type": "boolean",
          "default": false,
          "description": "Replaces aliases with their aliased name."
        },
        "powershell.codeFormatting.preset": {
          "type": "string",
          "enum": [
            "Custom",
            "Allman",
            "OTBS",
            "Stroustrup"
          ],
          "default": "Custom",
          "description": "Sets the codeformatting options to follow the given indent style in a way that is compatible with PowerShell syntax. For more information about the brace styles please refer to https://github.com/PoshCode/PowerShellPracticeAndStyle/issues/81."
        },
        "powershell.codeFormatting.openBraceOnSameLine": {
          "type": "boolean",
          "default": true,
          "description": "Places open brace on the same line as its associated statement."
        },
        "powershell.codeFormatting.newLineAfterOpenBrace": {
          "type": "boolean",
          "default": true,
          "description": "Adds a newline (line break) after an open brace."
        },
        "powershell.codeFormatting.newLineAfterCloseBrace": {
          "type": "boolean",
          "default": true,
          "description": "Adds a newline (line break) after a closing brace."
        },
        "powershell.codeFormatting.pipelineIndentationStyle": {
          "type": "string",
          "enum": [
            "IncreaseIndentationForFirstPipeline",
            "IncreaseIndentationAfterEveryPipeline",
            "NoIndentation",
            "None"
          ],
          "default": "NoIndentation",
          "description": "Multi-line pipeline style settings (default: NoIndentation)."
        },
        "powershell.codeFormatting.whitespaceBeforeOpenBrace": {
          "type": "boolean",
          "default": true,
          "description": "Adds a space between a keyword and its associated scriptblock expression."
        },
        "powershell.codeFormatting.whitespaceBeforeOpenParen": {
          "type": "boolean",
          "default": true,
          "description": "Adds a space between a keyword (if, elseif, while, switch, etc) and its associated conditional expression."
        },
        "powershell.codeFormatting.whitespaceAroundOperator": {
          "type": "boolean",
          "default": true,
          "description": "Adds spaces before and after an operator ('=', '+', '-', etc.)."
        },
        "powershell.codeFormatting.whitespaceAfterSeparator": {
          "type": "boolean",
          "default": true,
          "description": "Adds a space after a separator (',' and ';')."
        },
        "powershell.codeFormatting.whitespaceInsideBrace": {
          "type": "boolean",
          "default": true,
          "description": "Adds a space after an opening brace ('{') and before a closing brace ('}')."
        },
        "powershell.codeFormatting.whitespaceBetweenParameters": {
          "type": "boolean",
          "default": false,
          "description": "Removes redundant whitespace between parameters."
        },
        "powershell.codeFormatting.whitespaceAroundPipe": {
          "type": "boolean",
          "default": true,
          "description": "REMOVED. Please use the \"powershell.codeFormatting.addWhitespaceAroundPipe\" setting instead. If you've used this setting before, we have moved it for you automatically."
        },
        "powershell.codeFormatting.addWhitespaceAroundPipe": {
          "type": "boolean",
          "default": true,
          "description": "Adds a space before and after the pipeline operator ('|') if it is missing."
        },
        "powershell.codeFormatting.trimWhitespaceAroundPipe": {
          "type": "boolean",
          "default": false,
          "description": "Trims extraneous whitespace (more than 1 character) before and after the pipeline operator ('|')."
        },
        "powershell.codeFormatting.ignoreOneLineBlock": {
          "type": "boolean",
          "default": true,
          "description": "Does not reformat one-line code blocks, such as \"if (...) {...} else {...}\"."
        },
        "powershell.codeFormatting.alignPropertyValuePairs": {
          "type": "boolean",
          "default": true,
          "description": "Align assignment statements in a hashtable or a DSC Configuration."
        },
        "powershell.codeFormatting.useConstantStrings": {
          "type": "boolean",
          "default": false,
          "description": "Use single quotes if a string is not interpolated and its value does not contain a single quote."
        },
        "powershell.codeFormatting.useCorrectCasing": {
          "type": "boolean",
          "default": false,
          "description": "Use correct casing for cmdlets."
        },
        "powershell.integratedConsole.showOnStartup": {
          "type": "boolean",
          "default": true,
          "description": "Shows the integrated console when the PowerShell extension is initialized."
        },
        "powershell.integratedConsole.focusConsoleOnExecute": {
          "type": "boolean",
          "default": true,
          "description": "Switches focus to the console when a script selection is run or a script file is debugged. This is an accessibility feature. To disable it, set to false."
        },
        "powershell.integratedConsole.useLegacyReadLine": {
          "type": "boolean",
          "default": false,
          "description": "Falls back to the legacy (lightweight) ReadLine experience. This will disable the use of PSReadLine in the PowerShell Integrated Console."
        },
        "powershell.integratedConsole.forceClearScrollbackBuffer": {
          "type": "boolean",
          "description": "Use the vscode API to clear the terminal since that's the only reliable way to clear the scrollback buffer. Turn this on if you're use to 'Clear-Host' clearing scroll history as wellclear-terminal-via-lsp."
        },
        "powershell.integratedConsole.suppressStartupBanner": {
          "type": "boolean",
          "default": false,
          "description": "Do not show the Powershell Integrated Console banner on launch"
        },
        "powershell.debugging.createTemporaryIntegratedConsole": {
          "type": "boolean",
          "default": false,
          "description": "Determines whether a temporary PowerShell Integrated Console is created for each debugging session, useful for debugging PowerShell classes and binary modules."
        },
        "powershell.developer.bundledModulesPath": {
          "type": "string",
          "description": "Specifies an alternate path to the folder containing modules that are bundled with the PowerShell extension (i.e. PowerShell Editor Services, PSScriptAnalyzer, Plaster)"
        },
        "powershell.developer.editorServicesLogLevel": {
          "type": "string",
          "enum": [
            "Diagnostic",
            "Verbose",
            "Normal",
            "Warning",
            "Error"
          ],
          "default": "Normal",
          "description": "Sets the logging verbosity level for the PowerShell Editor Services host executable.  Valid values are 'Diagnostic', 'Verbose', 'Normal', 'Warning', and 'Error'"
        },
        "powershell.developer.editorServicesWaitForDebugger": {
          "type": "boolean",
          "default": false,
          "description": "Launches the language service with the /waitForDebugger flag to force it to wait for a .NET debugger to attach before proceeding."
        },
        "powershell.developer.featureFlags": {
          "type": "array",
          "default": null,
          "description": "An array of strings that enable experimental features in the PowerShell extension."
        },
        "powershell.developer.waitForSessionFileTimeoutSeconds": {
          "type": "number",
          "default": 240,
          "description": "When the PowerShell extension is starting up, it checks for a session file in order to connect to the language server. This setting determines how long until checking for the session file times out. (default is 240 seconds or 4 minutes)"
        },
        "powershell.pester.useLegacyCodeLens": {
          "type": "boolean",
          "default": true,
          "description": "Use code lense that is compatible with Pester 4. Disabling this will show 'Run Tests' on all It, Describe and Context blocks, and will correctly work only with Pester 5 and newer."
        },
        "powershell.pester.outputVerbosity": {
          "type": "string",
          "enum": [
            "FromPreference",
            "None",
            "Minimal",
            "Normal",
            "Detailed",
            "Diagnostic"
          ],
          "default": "FromPreference",
          "description": "Defines the verbosity of output to be used. For Pester 5 and newer the default value FromPreference, will use the Output settings from the $PesterPreference defined in the caller context, and will default to Normal if there is none. For Pester 4 the FromPreference and Normal options map to All, and Minimal option maps to Fails."
        },
        "powershell.pester.debugOutputVerbosity": {
          "type": "string",
          "enum": [
            "None",
            "Minimal",
            "Normal",
            "Detailed",
            "Diagnostic"
          ],
          "default": "Diagnostic",
          "description": "Defines the verbosity of output to be used when debugging a test or a block. For Pester 5 and newer the default value Diagnostic will print additional information about discovery, skipped and filtered tests, mocking and more."
        },
        "powershell.buttons.showRunButtons": {
          "type": "boolean",
          "default": true,
          "description": "Show the Run and Run Selection buttons in the editor titlebar."
        },
        "powershell.buttons.showPanelMovementButtons": {
          "type": "boolean",
          "default": false,
          "description": "Show buttons in the editor titlebar for moving the panel around."
        },
        "powershell.notebooks.showToggleButton": {
          "type": "boolean",
          "default": false,
          "description": "Controls whether we show or hide the buttons to toggle Notebook mode in the top right."
        },
        "powershell.notebooks.saveMarkdownCellsAs": {
          "type": "string",
          "enum": [
            "BlockComment",
            "LineComment"
          ],
          "default": "BlockComment",
          "description": "Controls what new markdown cells in Notebook Mode get saved as in the PowerShell file."
        }
      }
    },
    "themes": [
      {
        "label": "PowerShell ISE",
        "uiTheme": "vs",
        "path": "./themes/theme-psise/theme.json"
      }
    ]
  },
  "private": true
}
