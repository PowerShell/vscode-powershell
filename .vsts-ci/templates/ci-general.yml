parameters:
  - name: pwsh
    type: boolean
    default: true
  - name: usePipelineArtifact
    type: boolean
    default: false

steps:
- task: PowerShell@2
  displayName: PowerShell version
  inputs:
    targetType: inline
    script: $PSVersionTable
    pwsh: ${{ parameters.pwsh }}

- checkout: self

# NOTE: We either checkout the Git repo for PowerShellEditorServices, or we
# download a pre-built artifact from the triggering pipeline and extract it to
# the modules folder. In this way we do not accidentally build a release of the
# server from this pipeline.
- checkout: PowerShellEditorServices
  condition: not(${{ parameters.usePipelineArtifact }})

- task: DownloadPipelineArtifact@2
  condition: ${{ parameters.usePipelineArtifact }}
  displayName: Download PowerShellEditorServices
  inputs:
    source: specific
    project: PowerShellEditorServices
    pipeline: 36
    preferTriggeringPipeline: true
    allowPartiallySucceededBuilds: true
    artifact: PowerShellEditorServices

- task: ExtractFiles@1
  condition: ${{ parameters.usePipelineArtifact }}
  displayName: Extract PowerShellEditorServices module
  inputs:
    archiveFilePatterns: $(Pipeline.Workspace)/PowerShellEditorServices.zip
    destinationFolder: $(Build.SourcesDirectory)/vscode-powershell/modules

- task: PowerShell@2
  displayName: Build and test
  inputs:
    targetType: inline
    script: |
      Get-Module -ListAvailable Pester
      Install-Module InvokeBuild -Scope CurrentUser -Force
      Invoke-Build -Configuration Release
      Write-Host "##vso[task.setvariable variable=vsixPath]$(Resolve-Path powershell-*.vsix)"
    workingDirectory: $(Build.SourcesDirectory)/vscode-powershell
    pwsh: ${{ parameters.pwsh }}

- publish: $(vsixPath)
  artifact: vscode-powershell-vsix-$(System.JobId)
  displayName: Publish extension artifact

- publish: $(Build.SourcesDirectory)/vscode-powershell/scripts/Install-VSCode.ps1
  artifact: vscode-powershell-unsigned-script-$(System.JobId)
  displayName: Publish unsigned script artifact

- task: PublishTestResults@2
  displayName: Publish test results
  inputs:
    testRunner: JUnit
    testResultsFiles: '**/test-results.xml'
  condition: succeededOrFailed()
